{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/oscarwang/Projects/take_home/react_note_search/src/components/BillingForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport { CardElement, injectStripe } from \"react-stripe-elements\";\nimport LoaderButton from \"./LoaderButton\";\nimport { useFormFields } from \"../libs/hooksLib\";\nimport \"./BillingForm.css\";\n\nfunction BillingForm({\n  isLoading,\n  onSubmit,\n  ...props\n}) {\n  _s();\n\n  const [fields, handleFieldChange] = useFormFields({\n    name: \"\",\n    storage: \"\"\n  });\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isCardComplete, setIsCardComplete] = useState(false);\n  isLoading = isProcessing || isLoading;\n\n  function validateForm() {\n    return fields.name !== \"\" && fields.storage !== \"\" && isCardComplete;\n  }\n\n  async function handleSubmitClick(event) {\n    event.preventDefault();\n    setIsProcessing(true);\n    const {\n      token,\n      error\n    } = await props.stripe.createToken({\n      name: fields.name\n    });\n    setIsProcessing(false);\n    onSubmit(fields.storage, {\n      token,\n      error\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    className: \"BillingForm\",\n    onSubmit: handleSubmitClick,\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      size: \"lg\",\n      controlId: \"storage\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Storage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        min: \"0\",\n        type: \"number\",\n        value: fields.storage,\n        onChange: handleFieldChange,\n        placeholder: \"Number of notes to store\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      size: \"lg\",\n      controlId: \"name\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Cardholder's name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        value: fields.name,\n        onChange: handleFieldChange,\n        placeholder: \"Name on the card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n      children: \"Credit Card Info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {\n      className: \"card-field\",\n      onChange: e => setIsCardComplete(e.complete),\n      style: {\n        base: {\n          fontSize: \"16px\",\n          color: \"#495057\",\n          fontFamily: \"'Open Sans', sans-serif\"\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LoaderButton, {\n      block: true,\n      size: \"lg\",\n      type: \"submit\",\n      isLoading: isLoading,\n      disabled: !validateForm(),\n      children: \"Purchase\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BillingForm, \"+SZyMvOAGBMwWR9UrpREHQc/pLM=\", false, function () {\n  return [useFormFields];\n});\n\n_c = BillingForm;\nexport default _c2 = injectStripe(BillingForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BillingForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/oscarwang/Projects/take_home/react_note_search/src/components/BillingForm.js"],"names":["React","useState","Form","CardElement","injectStripe","LoaderButton","useFormFields","BillingForm","isLoading","onSubmit","props","fields","handleFieldChange","name","storage","isProcessing","setIsProcessing","isCardComplete","setIsCardComplete","validateForm","handleSubmitClick","event","preventDefault","token","error","stripe","createToken","e","complete","base","fontSize","color","fontFamily"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport { CardElement, injectStripe } from \"react-stripe-elements\";\nimport LoaderButton from \"./LoaderButton\";\nimport { useFormFields } from \"../libs/hooksLib\";\nimport \"./BillingForm.css\";\n\nfunction BillingForm({ isLoading, onSubmit, ...props }) {\n  const [fields, handleFieldChange] = useFormFields({\n    name: \"\",\n    storage: \"\",\n  });\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isCardComplete, setIsCardComplete] = useState(false);\n\n  isLoading = isProcessing || isLoading;\n\n  function validateForm() {\n    return fields.name !== \"\" && fields.storage !== \"\" && isCardComplete;\n  }\n\n  async function handleSubmitClick(event) {\n    event.preventDefault();\n\n    setIsProcessing(true);\n\n    const { token, error } = await props.stripe.createToken({\n      name: fields.name,\n    });\n\n    setIsProcessing(false);\n\n    onSubmit(fields.storage, { token, error });\n  }\n\n  return (\n    <Form className=\"BillingForm\" onSubmit={handleSubmitClick}>\n      <Form.Group size=\"lg\" controlId=\"storage\">\n        <Form.Label>Storage</Form.Label>\n        <Form.Control\n          min=\"0\"\n          type=\"number\"\n          value={fields.storage}\n          onChange={handleFieldChange}\n          placeholder=\"Number of notes to store\"\n        />\n      </Form.Group>\n      <hr />\n      <Form.Group size=\"lg\" controlId=\"name\">\n        <Form.Label>Cardholder&apos;s name</Form.Label>\n        <Form.Control\n          type=\"text\"\n          value={fields.name}\n          onChange={handleFieldChange}\n          placeholder=\"Name on the card\"\n        />\n      </Form.Group>\n      <Form.Label>Credit Card Info</Form.Label>\n      <CardElement\n        className=\"card-field\"\n        onChange={(e) => setIsCardComplete(e.complete)}\n        style={{\n          base: {\n            fontSize: \"16px\",\n            color: \"#495057\",\n            fontFamily: \"'Open Sans', sans-serif\",\n          },\n        }}\n      />\n      <LoaderButton\n        block\n        size=\"lg\"\n        type=\"submit\"\n        isLoading={isLoading}\n        disabled={!validateForm()}\n      >\n        Purchase\n      </LoaderButton>\n    </Form>\n  );\n}\n\nexport default injectStripe(BillingForm);\n"]},"metadata":{},"sourceType":"module"}